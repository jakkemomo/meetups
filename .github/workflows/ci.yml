name: mevent-ci

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  test:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/testing.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/testing.txt
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends binutils libproj-dev gdal-bin
      - name: Run database
        run: |
          docker compose -f deployments/docker-compose-db.yml up -d
          for i in {1..10}; do
            if pg_isready -h "${{ secrets.DB_HOST }}" -p "${{ secrets.DB_PORT }}"; then
              echo "Database is ready to accept connections."
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Database failed to start after ${i} attempts."
              exit 1
            fi
            echo "Waiting for database to be ready..."
            sleep 10
          done
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          WS_DB: ${{ secrets.WS_DB }}
      - name: Test with pytest
        run: |
          python manage.py migrate --noinput --database=channels_postgres && python manage.py migrate --noinput && python manage.py sync_translation_fields --noinput
          pytest -m "not asyncio"
          pytest -m asyncio
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          WS_DB: ${{ secrets.WS_DB }}
